wxml语法

判断语句：
<view wx:if="{{count > 1}}">233</view>
<view wx:elif="{{count == 1}}">111</view>
<view wx:else>123</view>

v-show同款方式:
<view hidden="{{false}}">小花</view> //false 是显示 true 是隐藏

for循环：
<view wx:for="{{data}}" wx:key="id"> //key唯一标识变量名或者可以是*this
  <text>{{item.name}}</text>
  -
  <text>{{item.age}}</text>
</view>

事件：
wxml:<button type="default" bindtap="update">点我</button>
js:
data: {
  arr: [1, 2],
  update() {
    this.data.arr.push(3)
    this.setData({
      arr: this.data.arr
    })
  }
  
wxs: //写完记得导出，支持e5及一下语法

wxs:
function fn() {
  return 111
}
module.exports = {
  fns: fn
}

wxml:
<view>
  时间系统 - {{tool.fns()}}
</view>
<wxs src="./index.wxs" module="tool"/>

wxs方法用在点击事件：
点击添加样式：
function fn(event, ownerInstance) {
  var instance = ownerInstance.selectComponent('.name')
  instance.setStyle({
    "font-size": "24px"
  })
  instance.addClass('color')
}
module.exports = {
  fns: fn
}

<view bind:tap="{{tool.fns}}">
  111
</view>
<wxs src="./index.wxs" module="tool"/>

全局配置 app.json tabBar 底部切换
"tabBar":{
    "color": "#999", //默认颜色
    "selectedColor": "#f00", //选中颜色
    "list":[
      {
        "pagePath": "pages/goods/index", //路径
        "text":"首页", //名称
        "iconPath":"/assets/add.png",//默认图标样式
        "selectedIconPath":"/assets/addActive.png"//选中图标样式
      }
    ]
  },
  导航栏 
  "window":{
    "navigationBarBackgroundColor": "#000000", //背景色
    "navigationBarTitleText": "微信小程序",  //文字
    "navigationBarTextStyle": "white" //文字颜色
    "backgroundColor": "#f5f5f5",//下拉背景颜色
    "enablePullDownRefresh": true //下拉刷新 默认为false
  }
  
 路由
 不包括tabBar
<navigator open-type="navigateTo" url="/pages/list/index">
    3333
</navigator>
tabBar //跳转完会清除所有的记录，回退不了了
<navigator open-type="switchTab" url="/pages/home/index">
  444
</navigator>
重定向
<navigator open-type="redirectTo" url="/pages/list/index">
555
</navigator>
点击登录
<view bind:tap="onLogin">登录</view>
onLogin(){
    wx.navigateTo({
      url: '/pages/list/index'
    })
  },
 传值
 <navigator open-type="navigateTo" url="/pages/list/index?name=李四">
    3333
 </navigator>
 onLogin(){
    wx.navigateTo({
      url: '/pages/list/index?name=2&age=3'
    })
 }
 获取值 //跳到那个页面在那个页面写
 onLoad: function (options) {
    console.log(options)
 },
 
 组件传值
 父子传值：
 父 ：data: {
    result: {
      imgUrl: '/assets/1.jpg',
      name: '小羊'
    }
  }
  <Images result="{{result}}"/>
子 js：properties: {
    // result: Object //这种也可以 但是没有默认值，不安全 推荐下边
    result: {
      type: 'Object', //类型
      value: {}
    }
  },
  <view class="home">
    <image src="{{result.imgUrl}}" mode="aspectFill" />
    <text>{{result.name}}</text>
  </view>
  
  组件点击传参
  <view class="com-card" bindtap="onclick" data-flag="{{result.url}}">
    <image src="{{result.imgUrl}}" mode="aspectFill"/>
    <view class="com-box">
      <text>{{result.name}}</text>
    </view>
  </view>
  接收
  onclick(e) {
    wx.navigateTo({
      url: e.currentTarget.dataset.flag
    })
  }
  父子传参
  <block wx:for="{{result}}" wx:key="id">
    <Card result="{{item}}" bind:onclick="onclick"/>
  </block>
  onclick(){
    console.log('我是父组件')
  },
  子：
  <view class="com-card" bind:tap="onTap">
    <image src="{{result.imgUrl}}" mode="aspectFill"/>
    <view class="com-box">
      <text>{{result.name}}</text>
    </view>
  </view>
  methods: {
    onTap(evt){
      console.log(1)
      this.triggerEvent('onclick')
    }
  }
  
  子传父
  methods: {
    onTap(evt){
      this.triggerEvent('onclick', {
        name: '张慧敏'
      })
    }
  }
  父：
  onclick(options){
    console.log(options)
  }

支持npm
找到对应目录 npm init 一路回车 就有package.json
cnpm i qs -S 就有node-module 工具 构建npm 之后就可以用了 import qs from 'qs' .js文件里引用
勾选npm 在详情 本地配置

request请求
详情 不校验合法域名
get
onReady () {
    wx.request({
      url: 'https://blogs.zdldove.top/Home/Apis/listWithPage',
      success: (res) => {
        console.log(res.data)
        this.setData ({
          result: res.data.result.list
        })
      }
    })
  },
post
onReady () {
    wx.request({
      method:'POST',
      url: 'https://blogs.zdldove.top/Home/Apis/listWithPage',
      data:qs.stringify({
        page: 2
      }),
      success: (res) => {
        console.log(res.data)
        this.setData ({
          result: res.data.result.list
        })
      }
    })
  },


* radio组 *
// xml
<radio-group class="radio-group" bindchange="radioChange">
        <radio 
          class="radio" 
          wx:for-items="{{radios}}" 
          wx:key="id" 
          value="{{item.title}}" 
          checked="{{item.checked}}"
        >
          <label>{{item.title}}</label>
        </radio>
</radio-group>
// js
radios:[
      { id: 0, title: '不招聘', checked: false },
      { id: 1, title: '电话不通', checked: false },
      { id: 2, title: '空号', checked: false },
      { id: 3, title: '其他', checked: false },
],
