*** index.jsx ***

import React, { useState, useEffect } from 'react' // 引入了hook的两个钩子
import _ from 'loadsh' // loadsh的深拷贝
import { Add } from '@/utils/request' // 提出来的方法也是自定义hook
import Cat from './cat' // 自定义hook组件

export default function Person() {
    //hook是一个特殊的函数，可以让你沟入react 例如 useState
    //它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。
    //最多两个，一个变量，一个改变它的方法
    let [count, setCount] = useState(0) //给变量传值 第一个钩子
    let [sum = '张三', setSum] = useState() //默认值
    const [data, setData] = useState([])
    const [todos, setTodos] = useState([
        { name: '张三' },
        { name: '李四' }
    ])

    const onSum = () => setSum({
        sum: '李四'
    })

    //不能直接插入，必须深拷贝
    const onTodos = () => {
        todos.push({ name: '王五' })
        setTodos(_.cloneDeep(todos))
    }

    //等价于DidMount DidUpdate willUnMount
    //每次渲染后调用 包括第一次渲染
    
    useEffect(() => {
        axios({
            method: 'post',
            url: 'https://blogs.zdldove.top/Home/Apis/listWithPage'
        })
            .then(res => {
                setData([...data, _.get(res.data, 'result.list',[])])
            })
    }, [])
    return (
        <div className='pages_home'>
            <p>{count}</p>
            <button onClick={() => setCount(count+1)}>点我</button>
            <p>{sum}</p>
            <button onClick={onSum}>点我</button>
            <p>
                { todos.map((v, k) => <span key={k}>{v.name}</span>) }
            </p>
            <button onClick={onTodos}>点我</button>
            <div>{Add()}</div>
            <Cat />
        </div>
    )
}

*** redux ***  //hook的redux

& reducer.js &

import { handleActions } from 'redux-actions'
import { FETCH_HOMES } from '@/constants/actionTypes' // 常量

const defaultState = {
    homesData: []
}

export default handleActions({
    [FETCH_HOMES]: (state, action) => ({
        ...state,
        homesData: action.payload.data.data
    })
}, defaultState)

& action.js &

import { createActions } from 'redux-actions'
import { homes, } from '@/services' // 封装一层的请求
import { FETCH_HOMES, } from '@/constants/actionTypes' // 常量

export const homesFn = createActions({
    [FETCH_HOMES]: () => homes(),
})

& homes.jsx & // 获取数据

import React, { useState, useEffect, useCallback } from 'react'
import { useDispatch, useMappedState } from 'redux-react-hook'
import { FETCH_HOMES, } from '@/constants/actionTypes' // 常量
import { homesFn } from '@/actions/homes' // actions的方法
import { hump } from '@/utils/string'  // 常量变为小写的方法

export default function Homes() {
    const onData = homesFn[hump(FETCH_HOMES)]
    const mapState = useCallback(state => {
        console.log(state.homes,1)
        return {
            homesData: state.homes.data
        }
    })
    const { homesData } = useMappedState(mapState)// 拿数据
    const dispatch = useDispatch() // 获取dispatch
    useEffect(() => {
        dispatch(onData())
    }, [])
    return()
}

& store.js &

import { createStore, combineReducers, compose, applyMiddleware } from 'redux'
import promise from 'redux-promise'
import { persistReducer } from 'redux-persist' // 数据持久化
import storage from 'redux-persist/lib/storage'
import autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2'
import { login, persists, hook, homes } from '@/reducer'

//我要对那些state做数据持久化
const rootPersistConfig = {
    key: 'root',
    storage: storage,
    stateReconciler: autoMergeLevel2,   // 多层
    whitelist: ['login'] //白名单 
}
//为 某个 reduce 做数据持久化
const myPersistReducer = persistReducer (
    rootPersistConfig,
    combineReducers({
        login,
        persists,
        hook,
        homes
    })
)
const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose
const store = createStore(
    myPersistReducer,
    composeEnhancers(applyMiddleware(promise, thunk))
)
window.store = store
export { store }

& index.js &

import React from 'react'
import ReactDOM from 'react-dom'
import Router from '@/router/index'  // 路由
import { store } from './store'  //store
import { Provider } from 'react-redux'
import { persistStore } from 'redux-persist'   //数据持久化
import { PersistGate } from 'redux-persist/lib/integration/react'
import { StoreContext } from 'redux-react-hook'
import './styles/style.less'

ReactDOM.render(
    <Provider store={store}>
        <StoreContext.Provider value={store}>
            <PersistGate loading={null} persistor={persistStore(store)}>
                <Router />
            </PersistGate>
        </StoreContext.Provider>
    </Provider>,
document.getElementById('root'))

import react,{ useRef, forwardRef, useImperativeHandle, useMemo, useCallback } from 'react';

const Hook = props => {
   const domRef = useRef(null)
   const childRef = useRef(null)
   const showChild = () => childRef.current.say()
   return (
       <div style={{ margin: "100px", border: "2px dashed", padding: "20px" }}>
        <div
          onClick={() => {
            domRef.current.focus();
            domRef.current.value = '请输入';
          }}
        >
          <label>这是一个dom节点：</label><input ref={domRef} />
        </div>
        <br />
        <p onClick={showChild} style={{ marginTop: "20px" }}>
          这是子组件
        </p>
        <Child ref={childRef} />
     </div>
   )
}

const Child = forwardRef((props, ref) => {
  useImperativeHandle(ref, () => ({
    say: sayHello,
  }));
  const sayHello = () => alert("hello,我是子组件");
  return null
});

useMemo and useCallback
useMemo和useCallback都会在组件第一次渲染的时候执行，之后会在其依赖的变量发生改变时再次执行；
并且这两个hooks都返回缓存的值，useMemo返回缓存的变量，useCallback返回缓存的函数。

* React.memo() * react 16.6

React.memo() 和 PureComponent 很相似，它帮助我们控制何时重新渲染组件。
组件仅在它的 props 发生改变的时候进行重新渲染。通常来说，在组件树中 React 组件，只要有变化就会走一遍渲染流程。
但是通过 PureComponent 和 React.memo()，我们可以仅仅让某些组件进行渲染。
由于只有需要被渲染的组件被渲染了，所以这是一个性能提升。
PureComponent 要依靠 class 才能使用。而 React.memo() 可以和 function component 一起使用。

import React from 'react';

const ImplicitSnowy = React.memo(props => (
  <div>implicit memoized component</div>
));

const SubComponent = props => <>implicit memoized component</>

const Memo = React.memo(SubComponent, (prevProps, nextProps) => 
  prevProps.name === nextProps.name
);

memo接收两个参数，一个是组件，一个是函数。这个函数就是定义了memo需不需要render的钩子。
比较前一次的props跟当前props，返回true表示不需要render。
也就是传给Memo的name不变时，不会触发SubComponent的render函数。

* React.lazy and suspence  *

React.lazy 用于做Code-Splitting，代码拆分。类似于按需加载，渲染的时候才加载代码。
React.lazy的提出是一种更优雅的条件渲染解决方案。
之所以说他更优雅，是因为他将条件渲染的优化提升到了框架层。
这里我们引出suspense。
当我们组件未渲染完成，需要loading时，可以这么写：

const OtherComponent = React.lazy(() => import('./OtherComponent'));
function MyComponent() {
  return (
    <div>
      <Suspense fallback={antd的空状态}>
        <OtherComponent />
      </Suspense>
    </div>
  );
}

import react, { useState, useEffect, useRef, useReducer, useContext, Component, Children } from 'react';
import { Button } from 'antd';
/** hooks获取上一次的值 **/
const Counter = () => {
  const [count, setCount] = useState(0)
  const now = count + 100
  const pre = usePrevious(now)
  return (
    <>
      <button onClick={() => setCount(count+1)}>click</button>
      <p>pre: {pre} now: {now}</p>
    </>
  )
}

function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  },[value]);
  return ref.current;
}

export default Counter

/** useContext useReducer **/
const TodosDispatch = React.createContext(null);
const initialState = { count: 0 };
function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    default:
      throw new Error();
  }
}
function TodosApp() {
  // 提示：`dispatch` 不会在重新渲染之间变化
  const [todos, dispatch] = useReducer(reducer, initialState);
  return (
    <TodosDispatch.Provider value={dispatch}>
      <DeepChild todos={todos} />
    </TodosDispatch.Provider>
  );
}

function DeepChild(props) {
  // 如果我们想要执行一个 action，我们可以从 context 中获取 dispatch。
  const dispatch = useContext(TodosDispatch);
  const handleClick = () => dispatch({ type: 'increment' });
  return (
    <>
      <button onClick={handleClick}>Add todo</button>
      <p>{props.todos.count}</p>
    </>
  );
}
export default TodosApp

/** context **/
const ThemeContext = React.createContext(null);

export default class extends Component {
  render() {
    const obj = {
      name: '张三',
      type: 'danger'
    }
    return (
      <ThemeContext.Provider value={obj}>
         <Toolbar />     
      </ThemeContext.Provider>
    )
  }
}

const Toolbar = () => {
  return (
    <div>
      <ThemedButton />
    </div>
  )
}

class ThemedButton extends Component {
  static contextType = ThemeContext;
  render() {
    return <Button type={this.context.type}>click me</Button>
  }
}

export default class extends Component {
  render() {
    return (
      <CallRole>
        <Button type="primary">click me</Button>
      </CallRole>
    )
  }
}

const CallRole = ({ children }) => {
  return (
    <div>
      {children}
    </div>
  )
}





