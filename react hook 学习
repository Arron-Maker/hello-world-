*** index.jsx ***

import React, { useState, useEffect } from 'react' // 引入了hook的两个生命周期
import _ from 'loadsh' // loadsh的深拷贝
import { Add } from '@/utils/request' // 提出来的方法也是自定义hook
import Cat from './cat' // 自定义hook组件

export default function Person() {
    //hook是一个特殊的函数，可以让你沟入react 例如 useState
    //它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。
    //最多两个，一个变量，一个改变它的方法
    let [count, setCount] = useState(0) //给变量传值 第一个钩子
    let [sum = '张三', setSum] = useState() //默认值
    const [data, setData] = useState([])
    const [todos, setTodos] = useState([
        { name: '张三' },
        { name: '李四' }
    ])

    const onSum = () => setSum({
        sum: '李四'
    })

    //不能直接插入，必须深拷贝
    const onTodos = () => {
        todos.push({ name: '王五' })
        setTodos(_.cloneDeep(todos))
    }

    //等价于DidMount DidUpdate willUnMount
    //每次渲染后调用 包括第一次渲染
    
    useEffect(() => {
        axios({
            method: 'post',
            url: 'https://blogs.zdldove.top/Home/Apis/listWithPage'
        })
            .then(res => {
                setData([...data, _.get(res.data, 'result.list',[])])
            })
    }, [])
    return (
        <div className='pages_home'>
            <p>{count}</p>
            <button onClick={() => setCount(count+1)}>点我</button>
            <p>{sum}</p>
            <button onClick={onSum}>点我</button>
            <p>
                { todos.map((v, k) => <span key={k}>{v.name}</span>) }
            </p>
            <button onClick={onTodos}>点我</button>
            <div>{Add()}</div>
            <Cat />
        </div>
    )
}

*** redux ***  //hook的redux

& reducer.js &

import { handleActions } from 'redux-actions'
import { FETCH_HOMES } from '@/constants/actionTypes' // 常量

const defaultState = {
    homesData: []
}

export default handleActions({
    [FETCH_HOMES]: (state, action) => ({
        ...state,
        homesData: action.payload.data.data
    })
}, defaultState)

& action.js &

import { createActions } from 'redux-actions'
import { homes, } from '@/services' // 封装一层的请求
import { FETCH_HOMES, } from '@/constants/actionTypes' // 常量

export const homesFn = createActions({
    [FETCH_HOMES]: () => homes(),
})

& homes.jsx & // 获取数据

import React, { useState, useEffect, useCallback } from 'react'
import { useDispatch, useMappedState } from 'redux-react-hook'
import { FETCH_HOMES, } from '@/constants/actionTypes' // 常量
import { homesFn } from '@/actions/homes' // actions的方法
import { hump } from '@/utils/string'  // 常量变为小写的方法

export default function Homes() {
    const onData = homesFn[hump(FETCH_HOMES)]
    const mapState = useCallback(state => {
        console.log(state.homes,1)
        return {
            homesData: state.homes.data
        }
    })
    const { homesData } = useMappedState(mapState)// 拿数据
    const dispatch = useDispatch() // 获取dispatch
    useEffect(() => {
        dispatch(onData())
    }, [])
    return()
}




