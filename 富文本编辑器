import React, { useEffect, useState } from 'react';
import { message } from 'antd';
import request from '@/utils/request';
import { uploadImg, uploaVideo, getUrl } from '@/services/global';
import moment from 'moment'
import BraftEditor from 'braft-editor'
import 'braft-editor/dist/index.css'
import { newDbRequest } from '@/utils/request';

const EditorComp = ({ value = '', disabled = true, saveDetails }) => {
  const [editor, setEditor] = useState(null);

  const myValidateFn = (file) => {
    const isLt100M = file.size < 100 * 1024 * 1024;
    if (!isLt100M) {
      message.warning(`视频大于${100}M请重新上传`);
    }
    return isLt100M
  }

  const myUploadFn = async (params) => {
    if (params.file.type.indexOf("video") != -1) {
      const isLt100M = params.file.size > 100 * 1024 * 1024;
      if (isLt100M) {
        message.warning(`视频大于${100}M请重新上传`);
        params.warning({
          url: ''
        })
        return
      }
      myUploadVideo(params)
      return
    }
    const formData = new window.FormData();
    formData.append('file', params.file)
    const res = await uploadImg(formData);
    if (res.success) {
      const address = window?.cache?.[3]; // oss地址前缀
      const url = await getImgUrl(res?.data?.slice(address?.length));

      params.success({
        url: url?.data,
        meta: {
          id: 'xxx',
          title: 'xxx',
          alt: 'xxx',
        }
      })
    }
  }

  const myUploadVideo = async (params) => {

    const res = await uploaVideo();
    let ossConfig = {
      policy: res.data.policy,
      OSSAccessKeyId: res.data.accessid,
      signature: res.data.signature,
      url: res.data.host,
      dir: res.data.dir,
      ossProxy: res.data?.ossProxy,
    };
    const photo = params.file;  // 获取视频对象
    const photoName = moment().format('YYYYMMDDHHmmss') + '.' + photo?.name.split(".")[1];  // 原视频的名称
    const key = ossConfig.dir + '/' + photoName;  // 存储到oss的视频名称 自己定，必须确保唯一性，不然会覆盖oss中原有的文件   拼接:dir/账号/房间号/文件名(记住一定要加上dir拼接!!!!!!!!!)---不要问为什么 不加你会很惨
    const policy = ossConfig.policy; // 服务器端同事调oss的API，通过接口返回给前端的 policy
    const OSSAccessKeyId = ossConfig.OSSAccessKeyId;  // 服务器端同事调oss的API，通过接口返回给前端的 OSSAccessKeyId
    // const callback = ossConfig.callback;  // 服务器端同事调oss的API，通过接口返回给前端的 callback。这个是需要 oss 触发这个回调来通知服务器操作结果。
    const signature = ossConfig.signature;  // 服务器端同事调oss的API，通过接口返回给前端的 signature。这个就是签名，最关键的。
    const url = ossConfig.ossProxy;
    const ossProxy = ossConfig.ossProxy;
    const dir = ossConfig.dir;
    // biu一下，提交给oss
    let param = {
      name: photoName,
      key,
      policy,
      OSSAccessKeyId,
      success_action_status: '200',  //必须这么写 不要问为什么
      signature,
      ossProxy,
      file: photo   //一定在最后面
    };  //顺序最好按照我写的  不要动位置 要不然不保证你能活着走下去..哈哈
    const formData = new FormData();  //以表单的形式传递给oss
    Object.keys(param).forEach((key) => {
      formData.append(key, param[key]);
    });
    // 请求oss上传
    newDbRequest(url, {
      method: 'POST',
      headers: {
      },
      body: formData,
    }).then(async () => {
      const urls = await getUrl(key);
      if (urls.success) {
        params.success({
          url: urls?.data,
          meta: {
            id: 'xxx',
            title: 'xxx',
            alt: 'xxx',
          }
        })
      }
    })
  }

  const getImgUrl = (url) => {
    return request(`/upload/getURL?pathName=${url}`, {
      method: 'POST'
    })
  }

  useEffect(() => {
    setEditor(BraftEditor.createEditorState(value));
  }, [value]);

  return (<>
    <div style={{ border: "1px solid #e8e8e8" }}>
      <BraftEditor
        value={editor}
        readOnly={disabled}
        onChange={(opt) => {
          const innerHtml = opt.toHTML();
          setEditor(innerHtml)
          saveDetails(innerHtml)
        }}
        media={{
          uploadFn: myUploadFn,
          validateFn: myValidateFn

        }}
      />
    </div>
  </>
  )
}

export default EditorComp;



<Form.Item
  label="内容"
  name="content"
  rules={[
    {
      validator: (_, value) =>
        content ? Promise.resolve() : Promise.reject(new Error('内容不能为空')),
    },
  ]}
>
  <Editors
    disabled={flag === 'detail'}
    saveDetails={opt => {
      setContent(opt);
    }}
  />
</Form.Item>
