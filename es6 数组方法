一、 fill() //生成一个长度为5，值为4的数组
    	const arr = new Array(5).fill(4)
    		//放了5个空位  //空位里填数值
    
    二、Arrayfrom() 
    	let arrayLike = {
    		'0': 'a',
    		'1': 'b',
    		'2': 'c',
    		length: 3
		}
    
   const arr1 = Array.from(arrayLike) //['a','b','c']
   //第一个参数把一个类数组转成数组 如果是个真数组 返回这个真数组
   Array.from([1, 2, 3], (x) => x * x) //[1,4,9]
   //第二个参数类似map方法 对每个元素进行处理
   
   Array.from({ length: 2 }, () => 'jack') //['jack', 'jack']
   //第一个参数指定了第二个参数运行的次数
   
   三、 Array.of() //将一组值，转换为数组
   		Array.of(3,11,8) //[3,11,8]
    
   四、 find() 找出第一个符合条件的数组成员
   		[1, 4, -5, 10].find( n => n < 0 ) // -5
    	find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组
    	[1, 5, 10, 15].find((value, index, arr) => {
  			return value > 9;
		 }) // 10
   
   五、 findIndex()返回第一个符合条件的元素的位置，若都不符合条件，则返回-1
   
   六、 entries() //键值对的遍历
   		['a', 'b', 'c'].entries().next().value 不使用for循环遍历  //[0,'a']
        
       for (let [index, elem] of ['a', 'b'].entries()) {
  			   console.log(index, elem)
		  }
  		  
       keys() 和 values()
       for (let elem of ['a', 'b'].values()) {
  				console.log(elem);
		  }
       //分别输出键值
   七、 includes() //查找该元素是否有给定的值 返回值是一个boolean类型
   		[1, 2, 3].includes(2)     // true
   		[1, 2, 3].includes(3, -1); // true 第二个参数表示查找元素的倒数位置
        
    八、 flat() //将多维数组变为一维 会跳过空位
    	 [1, 2, [3, 4]].flat() // [1, 2, 3, 4] 默认维数一层
       [1, 2, [3, [4, 5]]].flat(Infinity) // [1, 2, 3, 4, 5]  多维变为一维
       
    九、 every() 对数组中每一项运行给定函数，如果该函数对每一项返回true,则返回true。 一假即假   
    	 arr.some((item,index,array))	//第一个参数是每个元素，第二个是下标，第三个是原数组
    		下同
    十、 some() 对数组中每一项运行给定函数，如果该函数对任一项返回true，则返回true。 一真即真
    	
    十一、reduce(callback,[initValue])
    		callback （执行数组中每个值的函数，包含四个参数）
    	   1、previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））
    		2、currentValue （数组中当前被处理的元素）
    		3、index （当前元素在数组中的索引）
    		4、array （调用 reduce 的数组）
         initialValue （作为第一次调用 callback 的第一个参数。）
        [1,2,3,4].reduce((prev, cur, index, arr)=>{
        	console.log(prev,cur,arr)
        })
			//1 2 1 //3 3 2 // 6 4 3   		
