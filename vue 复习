<template>
  <!-- v-bind的使用 -->
  <div :class="{active: isActive}">
    111

    <!-- v-if的使用 -->
    <div v-if="isTrue === 1">true</div>
    <div v-else-if="isTrue === 2">false</div>
    <div v-else>isTrue</div>

    <!-- v-show的使用 -->
    <h1 v-show="show">你被发现了</h1>

    <!-- v-for的使用 -->
    <!-- <div v-for="item in data" :key="item.id">{{item.name}}</div> -->

    <!-- v-if 配合 v-for 的使用 -->
    <div v-for="item in data" :key="item.id">
      <p v-if="!item.active">{{item.name}}</p>
    </div>

    <!-- v-click 按键修饰符 -->
    <div @click.once="click($event)">
      风也有烦恼
      <a href="https://www.baidu.com" @click.prevent="stop">百度一下你就知道</a>
    </div>
    <!-- v-model 双向绑定 -->
    <input type="text" v-model="message"><span>{{message}}</span>
    <!-- checkbox组 -->
    <input type="checkbox" value="篮球" v-model="checkbox" id="jack">
    <label for="jack">篮球</label>
    <input type="checkbox" value="足球" v-model="checkbox" id="mom">
    <label for="mom">足球</label>
    <input type="checkbox" value="排球" v-model="checkbox" id="dad">
    <label for="dad">排球</label>
    <p>{{checkbox}}</p>

    <!-- select -->
    <!-- <select v-model="selected">
      <option>A</option>
      <option>B</option>
      <option>C</option>
    </select>
    <br>
    <span>Selected: {{ selected }}</span> -->

    <!-- select 循环 -->
    <select v-model="selected">
      <option
        v-for="option in data"
        :value="option.id"
        :key="option.id"
      >
        {{ option.name }}
      </option>
    </select>
    <span>Selected: {{ selected }}</span>
    <br />
    <!-- 单选框 -->
    <input type="radio" v-model="pick" value="男" id="man">
    <label for="man">男</label>
    <input type="radio" v-model="pick" value="女" id="woman">
    <label for="woman">女</label>
    <span>radio: {{pick}}</span>

    <!-- .number -->
    <input type="number" v-model.number="num">
    <span>number: {{typeof num}}</span>
  </div>
</template>

<script>
import './style.less'

export default {
  data () {
    return {
      isActive: true,
      isTrue: 4,
      show: true,
      data: [
        {
          id: 1,
          name: 'A',
          active: true
        },
        {
          id: 2,
          name: 'B',
          active: true
        }
      ],
      message: '',
      checkbox: [],
      selected: [],
      pick: [],
      num: ''
    }
  },
  methods: {
    click (item) {
      console.log(item)
    },
    stop () {
      console.log('百度一下，你就知道')
    }
  }
}
</script>

 **** // 父子传参
 **** <Button data="mouth" @handleClick="click" /> //动态值使用v-bind绑定
 
 **** //子组件往父组件传值
 <template>
  <div class="commit-button">
      <button @click="onClick">风也有烦恼</button>
      <p>{{data}}</p>
  </div>
</template>

<script>
  export default {
    props: ['data'],
    data () {
      return {
        arr: [1, 2, 3]
      }
    },
    methods: {
      onClick () {  //handleClick跟父组件绑定的handleClick是一样的 在父组件调用这个
        this.$emit('handleClick', this.arr)
      }
    }
  }
</script>


**** // 路由传参
*第一种* 函数模式
{
  path: '/btn',
  component: Button,
  props: (route) => ({ query: route.query.name })
}
<router-link to="/btn/?name=张三">btn-1</router-link>
//获取
props: ['query']  {{query}}
*第二种*
{
  path: '/btn/:id',
  component: Button,
  props: true
}
<router-link to="/btn/2">btn-1</router-link>
//获取
props: ['id']  {{id}}
//监听
第一次在mounted中可以监听到
第二次在updated中可以监听到

****  // 路由懒加载 组件懒加载
cnpm i babel-plugin-component -S
npm install --save-dev @babel/plugin-syntax-dynamic-import
babel.config.js 替换
module.exports = {
    presets: [
      '@vue/cli-plugin-babel/preset',
    ],
    "plugins": [
      [
        "component", {
          "libraryName": "mint-ui",
          "style": true
        },
        "@babel/plugin-syntax-dynamic-import"
      ],
    ]
  }
  //引用                     //设置一个别名，在network.js 下边可以清楚的找到对应的
  const Home = () => import(/* webpackChunkName: "home" */ '@/pages/home')

* 全局路由守卫 *
const router = new VueRouter({
  mode: 'history',
  routes
})

router.beforeEach((to, from, next) => {
  if (!localStorage.token) { //先判断登没登陆
    if (to.path === '/login' || to.path === '/reg') { //再判断现在的页面是否是login或reg 如果是 就next()
      next()
    } else {
      next('/login')  // 不是登录页就让它跳转到登录页
    }
  } else {
    next()
  }
})
