<FormItem label="封面图片"
  help={curTag.flag !== 'detail' ? '支撑扩展名: .jpg .png 图片大小限制500KB' : ''}
>
  {getFieldDecorator('coverUrl', {
    valuePropName: 'fileList',
    initialValue: coverUrlList,
    getValueFromEvent: e => this.normFile(e, 500, 'coverUrlList'),
  })(
    curTag.flag !== 'detail' ? <Upload
      {...uploadprops}
      accept=".jpg,.png,.jpeg"
      listType="picture-card"
    >
      {coverUrlList.length < 1 ? (
        <Button>
          <Icon type="upload" /> 上传图片
        </Button>
      ) : null}
    </Upload>
      : <img src={detailData.coverUrl} alt="" style={{ width: 80, height: 80 }} />,
  )}
</FormItem>

normFile = (e, size, flag) => {
    const { file, fileList } = e
    if (file.status) {
      this.setState({
        [flag]: fileList,
      })
      return fileList
    }
    const isSize = file.size > size * 1024;
    if (isSize) {
      message.warning(`图片大于${size}KB请重新上传`);
    } else {
      this.setState({
        [flag]: fileList,
      });
      return fileList
    }
  };
  
/*  modal */

state={ key: Math.random() }

<Modals
    modalList={modalList} // 详情数据
    visible={visible} // 显示隐藏
    title={title} // 标题名称
    handleOk={this.handleOk} // 完成关掉弹窗并调用列表
    handleCancel={this.handleCancel} // 取消关闭弹窗并调用列表
    footer={false} // 底部自定义
    width={850} // 宽度
    flag={flag} // 判断是新增 || 编辑 || 详情
    key={key} // 随机key值
/>
  
import React, { Component } from 'react';
import {
  Form,
  Radio,
  Button,
  Row,
  Col,
  Modal,
  Input,
  Upload,
  Icon,
  message,
  Select,
} from 'antd';
import request from '@/utils/request'
import { getSave, getUpdate, getLock, getUnlock } from '@/services/operationManagement/banner';
import { router } from 'umi';

const { Option } = Select;

export default 
@Form.create()
class extends Component {
  state = {
    bannerUrl: '',
    previewImage: '',
    previewVisible: false,
    fileList: [],
    loading: false
  }
  handleSubmit = e => {
    e.preventDefault();
    const { flag, handleOk, } = this.props
    const { getFieldValue } = this.props.form;
    const { bannerUrl } = this.state
    const { modalList } = this.props

    this.props.form.validateFields((err, values) => {
      if (!err) {
        this.setState({
          loading: true
        })
        let params = {}
        if (flag === 'add') {
          params = {
            bannerUrl,
            id: modalList.id,
            ...values
          }
          delete params.iconUrl
        } else {
          params = {
            bannerUrl:  bannerUrl || modalList.bannerUrl,
            id: modalList.id,
            ...values
          }
          delete params.iconUrl
        }
        const res = flag === 'add'
          ? getSave(params) : getUpdate(params)
        res.then(res => {
          if (res.success) {
            const title = flag === 'add' ? '新增' : flag === 'update' ? '编辑' : ''
            message.success(`${title}成功`)
            handleOk()
            this.setState({
              bannerUrl: '',
              loading: false
            })
          } else {
            message.error(res.message)
          }
          this.props.form.resetFields()
        })
      }
    });
  };

  normFile = e => {
    if (Array.isArray(e)) {
      return e;
    }
    return e && e.fileList;
  };
  handleChange = async ({ file, fileList }) => {
    const { getFieldValue } = this.props.form;

    if (getFieldValue('location') !== undefined && fileList.length > 0) {
      // if (file.status === 'done') {
        const formData = new FormData();
        formData.append('file', fileList[0].originFileObj);
        formData.append('location', getFieldValue('location'))
        request('/upload/banner', {
          method: 'POST',
          body: formData,
          requestType: 'form',
        }).then(res => {
          if (res.success) {
            let arr = []
            arr.push(res.data)
            this.setState({
              bannerUrl: res.data,
              fileList: arr
            });
          } else {
            message.error(res.message)
          }
        });
      // }
    } else {
      this.setState({
        bannerUrl: '',
        fileList: []
      });
    }
  };
  largerBeforeUpload = file => {
    const { getFieldValue } = this.props.form;

    return getFieldValue('location') === 1 ? this.isSize(file, 1030, 360) : this.isSize(file, 1030, 240)
  }
  // 进行宽高验证
  isSize = (file, width, height) => {
    const { getFieldValue } = this.props.form;
    return new Promise((resolve, reject) => {
      let _URL = window.URL || window.webkitURL;
      let img = new Image();
      if (getFieldValue('location') !== undefined) {
        img.onload = () => {
          let valid = img.width == width && img.height == height;
          valid
            ? resolve()
            : message.error('图片尺寸不符合要求，请修改后重新上传！'); reject();
        };
        img.src = _URL.createObjectURL(file);
      } else {
        message.error('请选择banner位置')
        reject()
      }
    });
  }
  cancel = () => {
    const { handleCancel } = this.props
    this.props.form.resetFields()
    this.setState({
      bannerUrl: ''
    })
    handleCancel()
  }
  // 预览
  handlePreview = file => {
    this.setState({
      previewImage: file.url || file.thumbUrl,
      previewVisible: true,
    });
  };
  handleCancel = () => {
    this.setState({
      previewVisible: false,
    });
  };
  render() {
    const { modalList, visible, handleOk, title, width, footer, flag } = this.props
    const { bannerUrl, previewVisible, previewImage, key, fileList, loading } = this.state
    const { terminalType } = modalList
    const { getFieldDecorator, getFieldValue } = this.props.form;
    const formItemLayout = {
      labelCol: { span: 6 },
      wrapperCol: { span: 14 },
    };
    const tailFormItemLayout = {
      wrapperCol: {
        xs: {
          span: 24,
          offset: 0,
        },
        sm: {
          span: 16,
          offset: flag !== 'edit' ? 9 : 10,
        },
      },
    };
    const uploadButton = (
      <div>
        <Icon type={'plus'} />
        <div className="ant-upload-text">Upload</div>
      </div>
    );
    const tit = getFieldValue('location')
    const help = tit === 1
      ? "banner尺寸：1030*360（3倍图）" : tit === 2 ? 'banner尺寸：1030*240（3倍图）' : ''
    return (
      <Modal
        title={title}
        visible={visible}
        onOk={handleOk}
        onCancel={this.cancel}
        width={width}
        footer={footer}
      >
        <Form {...formItemLayout} onSubmit={this.handleSubmit}>
          <Form.Item label="banner位置">
            {getFieldDecorator('location', {
              initialValue: modalList.location || undefined,
              rules: [{ required: true, message: '请选择位置' }],
            })(
              <Select placeholder="请选择" disabled={flag === 'edit' ? true : false}>
                <Option key="0" value={1}> 首页头部 </Option>
                <Option key="1" value={2}> 首页腰部 </Option>
              </Select>
            )}
          </Form.Item>
          <Form.Item label="标题">
            {getFieldDecorator('title', {
              initialValue: modalList.title || '',
              rules: [
                { required: true, message: '请输入' },
                { max: 20, message: '标题不能超出20个字' }
              ],
            })(<Input placeholder="请输入标题" disabled={flag === 'edit' ? true : false} />)}
          </Form.Item>
          <Form.Item label="URL">
            {getFieldDecorator('url', {
              initialValue: modalList.url || '',
            })(<Input placeholder='请输入活动URL地址' disabled={flag === 'edit' ? true : false} />)}
          </Form.Item>
          <Form.Item label="排序">
            {getFieldDecorator('orderNo', {
              initialValue: modalList.orderNo || 0,
            })(<Input disabled={flag === 'edit' ? true : false} />)}
          </Form.Item>
          <Form.Item label="图片"
            help={help}
          >
            {getFieldDecorator('iconUrl', {
              valuePropName: 'bannerUrl',
              initialValue: modalList.bannerUrl || '',
              getValueFromEvent: this.normFile,
              rules: [{ required: true, message: '请上传' }],
            })(
              <Upload
                accept=".jpg,.png,.svg,.jpeg"
                listType="picture-card"
                onChange={this.handleChange}
                disabled={flag === 'edit' ? true : false}
                beforeUpload={this.largerBeforeUpload}
                onPreview={this.handlePreview} // 点击图片缩略图，进行预览
                key={key}
              >
                {
                  fileList.length === 1
                    ? null
                    : modalList.bannerUrl
                      ? <img src={modalList.bannerUrl} alt="avatar" style={{ width: '100%' }} />
                      : uploadButton
                }
              </Upload>
            )}
          </Form.Item>
          {
            flag !== 'edit' &&
            <Form.Item {...tailFormItemLayout}>
              <Button onClick={this.cancel} style={{ marginRight: '10px' }}>取消</Button>
              <Button type="primary" htmlType="submit" loading={loading}>
                保存
              </Button>
            </Form.Item>
          }
          {
            flag === 'edit' &&
            <Form.Item {...tailFormItemLayout}>
              <Button onClick={this.cancel} style={{ marginRight: '10px' }}>返回</Button>
            </Form.Item>
          }
        </Form>
        <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel} width={1030}>
          <img alt="example" style={{ width: '98%', height: tit === 1 ? 360 : 240 }} src={previewImage} />
        </Modal>
      </Modal>
    )
  }
}
