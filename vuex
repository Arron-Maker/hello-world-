创建一个store

import Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex)

const store = new Vuex.Store({
  state: {
    name: '张三'
  },

  // 触发变更 // 同步的
  mutations: {
    increment (state) {
      state.name = '李四'
    }
  }
})

export default store

main.js注入全局
// 用的时候
<button @click="click">click</button>
methods: {
    click () {
      this.$store.commit('increment') //用commit触发变更
    }
}

//获取的时候
* 第一种 *
computed: {
    name () {
      return this.$store.state.name
    }
}

* 第二种 *
import { mapState } from 'vuex'
computed: mapState({
    // 箭头函数可使代码更简练
    count: state => state.count,

    // 传字符串参数 'count' 等同于 `state => state.count`
    countAlias: 'count',

    // 为了能够使用 `this` 获取局部状态，必须使用常规函数
    countPlusLocalState (state) {
      return state.count + this.localCount
    }
})

* 第三种 *
computed: mapState([
  // 映射 this.count 为 store.state.count
  'count'
])

//actions
const store = new Vuex.Store({
  state: {
    tableData: [],
    rulei: []
  },

  // 触发变更
  mutations: {
    [GET_TABLE_DATA] (state, action) {
      state.tableData = action.data
    },
    [GET_RULEI_LIST] (state, action) {
      state.rulei = action.data
    }
  },
  actions: {
    [ON_TABLE] ({ commit }) {
      TableData({ username: 'admin', password: 'admin', token: localStorage.token })
        .then(res => {
          commit(GET_TABLE_DATA, res)
        })
    },
    [ON_ROOT] ({ commit }) {
      RULEI({ token: localStorage.token })
        .then(res => {
          commit(GET_RULEI_LIST, res.data)
        })
    }
  }
})

store.dispatch(ON_ROOT)

* module *
modules: { // 创建多个， 跟reducer合并类似
  table,
}
store.commit('table/GET_TABLE_DATA', 111) // 触发table下的变更
this.$store.dispatch(`table/${ON_TABLE}`) // 触发table下的action
/* 公共的只需要把前边的table去掉就可以了 */
computed: {
    ...mapState('table', ['name'])  // 获取table下的name
},


//代理
devServer: {
  proxy: {
    '/api': {
      target: 'https://blogs.zdldove.top',
      changeOrigin: true,
      ws: true,
      pathRewrite: {
        '^/api': ''
      }
    }
  }
}

* input 绑定的值在vuex中 实施的改变监听 *
<input type="text" :value="price" @input="message">
methods: {
  ...maoState({
    message: state => state.obj.message
  })
  message (evt) {
    this.$store.commit('updateMessage', e.target.value)
  }
}
* vuex数据持久化 *
// vuex数据持久化
plugins: [createPersistedState({
  key: 'rootPersisted', // 配置一个别名
  storage: window.sessionStorage, // 默认存到localStorage
  reducer (options) { // options返回的是state下的值
    return {
      tableData: options.tableData // 把需要的值存起来
    }
  }
})]
//module 返回的层级对应上
modules: {
    login,
},
plugins: [createPersistedState({
  key: 'rootPersisted',
  storage: window.sessionStorage,
  reducer (options) {
    return {
      login: {
        price: options.login.price
      }
    }
  }
})]
