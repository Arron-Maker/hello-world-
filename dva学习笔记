* webpackrc.js *

export default {
    publicPath: '/',

    //按需加载
    extraBabelPlugins: [
        ['import', { 'libraryName': 'antd', 'libraryDirectory': 'es', 'style': 'css' }]
    ],

    //别名
    alias: {
        '@': `${__dirname}/src`,
    },

    //代理
    proxy: {
        '/aps': {
            target: 'https://api.baxiaobu.com',
            changeOrigin: true,
            pathRewrite: {
                '^/aps': '',
            }
        }
    }
}
 
 * index.js *
 
 cnpm i history -S
 cnpm i redux-persist -S
 
 import { createBrowserHistory } from 'history'
 import { persistStore, persistReducer } from 'redux-persist'
 import storage from 'redux-persist/lib/storage'

 const persistConfig = {
    key: 'home',
    storage,
    whitelist: ['home'] //白名单 写谁谁持久化 //黑名单是写谁谁不持久化
}

const persistEnhancer = () => createStore => (reducer, initialState, enhancer) => {
    const store = createStore(persistReducer(persistConfig, reducer), initialState, enhancer)
    const persist = persistStore(store)
    return { ...store, persist }
}

// 1. Initialize
const app = dva({
    history: createBrowserHistory(), //去掉 # 号
    onReducer: reducer => persistReducer(persistConfig, reducer),
    extraEnhancers: [persistEnhancer()],
})
 
 * models home.js *
 
 import { getUser } from '@/services/home'

  export default {
      namespace: 'home', //命名空间
      
      //订阅 作用就是一进来页面就自动触发fetch函数拿到数据
      subscriptions: {
        setUp ({ history, dispatch }) {
            history.listen(({ pathname }) => {
                const reg = pathToRegexp('/').test(pathname)
                if (reg) {
                    dispatch({ type: 'fetch' })
                }
            })
        }
     },
       
      state: {
          name: '张三',
          data: []
      },
      //异步
      effects: {
          *fetch({ payload }, { call, put, select }) {
              const datas = yield call(getUser)  //getUser === get('url')
              yield put({
                  type: 'updateName',
                  payload: { data: datas.data.users }
              })
          }
      },
      //同步
      reducers: {
          updateName(state, action) {
              return { ...state, ...action.payload } //解构
          }
      }
  }

* 触发 * 
//同步
click = () => {
    this.props.dispatch({
          type: 'home/updateName',
          payload: {
            name: '李四'  //传个对象
          }
    })
}
//异步
 onclick = () => {
    this.props.dispatch({
        type: 'home/fetch',
    })
 }

* router.js *

import { Router, Route, Switch } from 'dva/router'
import dynamic from 'dva/dynamic'

function RouterConfig({ history, app }) {
  const Home = dynamic({
    app,
    //redux异步加载
    models: () => [
      import('./models/home'),
    ],
    //组件异步加载
    component: () => import('@/pages/home'),
  })
  return (
    <Router history={history}>
      <Switch>
        <Route path="/" exact component={Home} />
      </Switch>
    </Router>
  );
}

