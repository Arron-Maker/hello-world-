/*
    rc-bullets
*/

import BulletScreen, { StyledBullet } from 'rc-bullets';
import { history, useDispatch, useSelector } from 'umi';

const [checked, setChecked] = useState(false);
const [screen, setScreen] = useState(null);
const { record, userMessage, data } = useSelector((state) => state.flower);

useEffect(() => {
    if (checked) {
      // 给页面中某个元素初始化弹幕屏幕，一般为一个大区块。此处的配置项全局生效
      let s = new BulletScreen('#screen', {
        duration: 20, // 滚动时长
        animateTimeFun: 'linear, cubic-bezier(0.6, 0.1, 0, 0.4)', // 动画函数
        pauseOnClick: true, // 点击停止
        trackHeight: 40, 
      });
      setScreen(s);
    } else {
      if (screen) {
        screen.clear();
      }
    }
  }, [checked]);

  useEffect(() => {
    if (screen) {
      const html = (text) => (
        <div className={styles['bullet_item']}>
          <img src={avatar} />
          <p>{text}参与了活动</p>
        </div>
      );

      data?.map((v, k) => {
        screen.push(
          <StyledBullet
            // head={avatar} // 头像
            msg={html(v?.name)} // 文字
            backgroundColor="none" // 背景颜色
            size="small" // 尺寸
            color="#FC4A18" //文字颜色
          />,
        );
      });
    }
  }, [screen]);
  
  
/*
    rc-danmaku
*/

import Danmaku from 'rc-danmaku';
import { useState, useEffect, useRef, useMemo } from 'react';
import { history, useDispatch, useSelector } from 'umi';

const [checked, setChecked] = useState(false);
const danmakuInsRef = useRef(null);
const dispatch = useDispatch();

useEffect(() => {
    if (checked) {
      // 可以在这里获取数据
      
      const danmakuIns = new Danmaku('.danmaku-wrapper', {
        rowHeight: 30, // 弹幕轨道高度，默认40（单位px）
        speed: 50, // 弹幕速度，默认100（单位px/s）
        opacity: 1, // 弹幕透明度，默认为1，范围 0-1
        maxRow: 2, // 弹幕最大轨道数，会根据容器高度自动计算，也可以手动赋值（此处设为0表示使用自动计算高度）
        minGapWidth: 20, //弹幕之前的最小间隔宽度，默认值20（单位px）
      });
      danmakuInsRef.current = danmakuIns;
    } else {
      danmakuInsRef.current && danmakuInsRef.current.destroy();
    }
}, [checked]);

useEffect(() => {
    if (danmakuInsRef.current && checked) {
      const HTMLRoot = ({ text }) => (
        <div className={styles['bullet_item']}>
          <img src={avatar} />
          <p>{text}</p>
        </div>
      );
      barrage?.forEach((v, k) => {
        setTimeout(() => {
          danmakuInsRef.current.push(<HTMLRoot text={v} key={k} />);
        }, 0);
      });
    }
}, [danmakuInsRef.current, checked]);

<div
  id={styles['danmaku-wrapper']}
  className={'danmaku-wrapper'}
  style={{ display: checked ? 'block' : 'none' }}
/>
